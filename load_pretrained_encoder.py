import osimport torchimport numpy as npdef load_pretrained_weights(model, pth_path):    """    将 PyTorch 自监督训练的 MLP 权重加载进 Keras 模型    参数：      - model: Keras MLP 模型（来自 FLAD 的 FCModel）      - pth_path: PyTorch 保存的 .pth 权重路径    """    if not os.path.exists(pth_path):        print(f"❌ 预训练权重文件不存在: {pth_path}")        return model    print(f"加载服务器预训练权重: {pth_path}")    state_dict = torch.load(pth_path, map_location='cpu')    # 提取每一层的参数（注意顺序）    weights = []    for key in state_dict:        w = state_dict[key].cpu().numpy()        weights.append(w)    # 获取 Keras 模型中 MLP 的 dense 层    keras_layers = [layer for layer in model.layers if 'dense' in layer.name or 'fc' in layer.name]    if len(weights) // 2 != len(keras_layers):        print("❌ PyTorch 层数与 Keras 模型不匹配，跳过加载")        return model    # 对每层设置权重（PyTorch权重需转置）    for i, layer in enumerate(keras_layers):        W = weights[2 * i].T  # PyTorch: (out, in)，Keras: (in, out)        b = weights[2 * i + 1]        layer.set_weights([W, b])    print("✅ 成功加载 PyTorch MLP 权重到 Keras 模型")    return model