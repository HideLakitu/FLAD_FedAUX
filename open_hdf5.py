import h5pyimport numpy as npimport osdef hdf5_to_npy(hdf5_path, output_npy_path, keep_only_benign=False):    """    从 hdf5 文件中提取特征数据    --- 如果 keep_only_benign=True，仅保留标签为0的流量(正常流量)    --- 如果 keep_only_benign=False，保留全部流量(包括攻击流量)    """    with h5py.File(hdf5_path, 'r') as f:        X = f['set_x'][:]  # 特征数据，通常是 (N, time_window, features)        Y = f['set_y'][:]  # 标签数据，通常是 (N,)    print(f"读取完成：总样本数 {X.shape[0]}")    if keep_only_benign:        benign_idx = (Y == 0)        X = X[benign_idx]        print(f"筛选后只保留 benign 样本：{X.shape[0]} 条（标签==0）")    # 确保输出路径存在    output_dir = os.path.dirname(output_npy_path)    if output_dir and not os.path.exists(output_dir):        os.makedirs(output_dir)    # 保存为npy    np.save(output_npy_path, X)    print(f"已保存为 {output_npy_path}，shape={X.shape}")def inspect_hdf5_and_labels(hdf5_path):    """    打开并浏览hdf5文件的结构和基本属性，同时统计set_y标签的分布    """    with h5py.File(hdf5_path, 'r') as f:        print(f"打开文件: {hdf5_path}")        print("=" * 60)        print("\n\n")        def print_attrs(name, obj):            print(f"名称: {name}")            for key, val in obj.attrs.items():                print(f"  属性 -> {key}: {val}")            if isinstance(obj, h5py.Dataset):                print(f"  类型: Dataset")                print(f"  shape: {obj.shape}")                print(f"  dtype: {obj.dtype}\n")            elif isinstance(obj, h5py.Group):                print(f"  类型: Group (子目录)\n")            print("-" * 50)        f.visititems(print_attrs)        # 特别处理set_y：统计标签分布        if 'set_y' in f.keys():            set_y = f['set_y'][:]            unique, counts = np.unique(set_y, return_counts=True)            print("\n标签 (set_y) 分布:")            for label, count in zip(unique, counts):                print(f"  标签 {label}: {count} 个样本\n")        else:            print("\n未找到 set_y 数据集，无法统计标签分布。\n")# 示例使用hdf5_path = './FEDAUX/hdf5_data/10t-10n-DOS2019-dataset-train.hdf5'output_npy_path = './FEDAUX/aux_data/aux2.npy'inspect_hdf5_and_labels(hdf5_path)#hdf5_to_npy(hdf5_path, output_npy_path)