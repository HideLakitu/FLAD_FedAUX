#  加载 .npy 辅助数据,供Server预训练时调用import numpy as npimport torchfrom torch.utils.data import Dataset, DataLoaderclass FLADDauxDataset(Dataset):    def __init__(self, npy_file, transform=None):        """        npy_file: str, path to .npy file containing (N, time_window, feature_dim) shaped tensor        transform: callable, optional, transform to apply on each sample        """        self.data = np.load(npy_file)  # 加载已经保存好的特征片段        self.transform = transform    def __len__(self):        return len(self.data)    def __getitem__(self, idx):        x = self.data[idx]  # 单个流量片段，shape: (time_window, feature_dim)        if self.transform:            x = self.transform(x)        return torch.tensor(x, dtype=torch.float32)  # 返回Tensordef get_daux_loader(npy_file, batch_size=128, shuffle=True, num_workers=0, transform=None):    """    加载辅助数据 npy 文件，并返回 DataLoader    """    dataset = FLADDauxDataset(npy_file, transform=transform)    loader = DataLoader(dataset, batch_size=batch_size, shuffle=shuffle, num_workers=num_workers)    return loader